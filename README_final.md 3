
# 🤖 AI in Software Engineering: Building Intelligent Software Solutions

[![Python](https://img.shields.io/badge/Python-3.7+-blue.svg)](https://python.org)
[![Jupyter](https://img.shields.io/badge/Jupyter-Notebook-orange.svg)](https://jupyter.org)
[![Selenium](https://img.shields.io/badge/Selenium-WebDriver-green.svg)](https://selenium.dev)
[![License](https://img.shields.io/badge/License-MIT-yellow.svg)](LICENSE)

> **Professional documentation with real metrics, ethical reflection, and a roadmap for future enhancements.**

---

## 📂 Project Structure

```plaintext
├── README.md                               # This comprehensive guide
├── part1_and_all.pdf                       # Complete assignment documentation
├── part 3                                  # Ethical reflection summary
├── PART 2/                                 # Practical implementations
│   ├── Task_1_AI-Powered_Code_Completion/
│   │   ├── sort_dictionaries.py            # Code completion demonstration
│   │   ├── summary
│   │   └── Screenshot 2025-06-30 161123.png
│   ├── Task_2_Automated_Testingwith_AI/
│   │   ├── log_in_test.py                  # Selenium-based automated testing
│   │   └── Screenshot 2025-06-29 120145.png
│   └── Task_3_Predictive_Analytics_for_Resource_Allocation/
│       ├── Predictive Analytics for Resource Allocation.ipynb
│       ├── data.csv                        # Breast cancer dataset
│       └── Ethics Reflection.txt           # Detailed ethical analysis
└── Bonus/
    └── BugTracerAI_Proposal.pdf            # AI-powered bug reproduction proposal
```

---

## 🚀 Quick Start Guide

- ✅ **Prerequisites**: Python 3.7+, Jupyter Notebook, Selenium
- 📦 **Install dependencies**:  
  ```bash
  pip install -r requirements.txt
  ```
- ⚙ **Run tasks**:
  - AI Code Completion:  
    ```bash
    python PART 2/Task_1_AI-Powered_Code_Completion/sort_dictionaries.py
    ```
  - Automated Testing:  
    ```bash
    python PART 2/Task_2_Automated_Testingwith_AI/log_in_test.py
    ```
  - Predictive Analytics:  
    Open and run notebook:
    ```
    PART 2/Task_3_Predictive_Analytics_for_Resource_Allocation/Predictive Analytics for Resource Allocation.ipynb
    ```

- ✅ **Verify ChromeDriver compatibility** if using Selenium.

---

## ✨ Enhanced Predictive Analytics & Resource Allocation Model

### 🛠 Extras Added to Improve Robustness & Explainability

1. ✅ **Stratified Splitting for Balanced Classes**  
   Maintains class distribution between training and test sets.

2. 🔄 **Handling Class Imbalance with SMOTE**  
   Generates synthetic samples for the minority class to improve recall.

3. 🧠 **Model Interpretability**  
   - Feature importance plots
   - SHAP visualizations to explain predictions

4. ⚙ **Hyperparameter Tuning (Grid Search)**  
   Searches over multiple parameter combinations to find optimal settings.

5. 📊 **Classification Report by Class**  
   Shows precision, recall, f1-score, and support per class.

6. 🤖 **Ensemble or Compare with Other Classifiers**  
   Compare performance of Random Forest, Logistic Regression, Gradient Boosting, etc.

7. 📈 **Visualizing Class Distributions**  
   Plots before and after SMOTE to show data balance.

8. 🔍 **Feature Exploration Class by Class**  
   Boxplots, violin plots to visualize how features differ between classes.

9. 🧪 **Feature Selection Pipeline with RFECV**  
   Recursive Feature Elimination with Cross-Validation to select best features.

---

## 📊 Comparative Analysis Tables

| Aspect            | Supervised Learning                | Unsupervised Learning                |
|------------------|------------------------------------|-------------------------------------|
| Data Requirements | Labeled datasets (bug/no-bug)     | Raw, unlabeled code                 |
| Training Time     | Moderate (dataset size dependent) | Longer (pattern discovery)          |
| Accuracy          | High for known patterns (85–95%)  | Variable (60–80%), more false positives |

---

## 💻 Real Code Examples

```python
# Example: Training a bug detection model
features = extract_code_features(code_samples)
labels = [1 if is_buggy(sample) else 0 for sample in code_samples]
model = RandomForestClassifier()
model.fit(features, labels)
```

---

## ⚡ Performance Metrics & Results

| Method                    | Avg Time per 1000 iterations |
|-------------------------|-----------------------------:|
| Manual Implementation    | 0.0023s                     |
| AI Suggestion (itemgetter) | 0.0019s                     |

✅ **Performance Improvement:** ~17.4%

---

## 🛡 Ethical Analysis

**⚠ Identified Bias Risks:**
- Age bias: dataset skewed toward older patients (50+)
- Ethnic bias: predominantly Caucasian patients
- Geographic bias: limited healthcare systems

**🛡 Mitigation (using IBM AI Fairness 360):**
```python
from aif360.datasets import BinaryLabelDataset
# Bias detection and mitigation steps
```

---

## 🧰 Technical Details

- **Dependencies:**  
  See `requirements.txt` (selenium, pandas, scikit-learn, shap, matplotlib, seaborn, etc.)
- **System Requirements:** Python 3.7+, ChromeDriver
- **Setup:**  
  ```bash
  pip install -r requirements.txt
  ```

---

## 📈 Results and Performance

- Task-specific benchmarks
- Cross-validation scores
- Model validation reports

---

## 📅 Future Enhancements

- [ ] Short-term: add deep learning models
- [ ] Medium-term: deploy REST API
- [ ] Long-term: cloud integration and live dashboards

---

## 🤝 Contributing Guidelines

- Fork this repo
- Create a new branch
- Submit pull requests
- Areas: model tuning, documentation, new features

---

## 📜 License & Acknowledgments

- **License:** MIT
- **Acknowledgments:** GitHub Copilot, IBM AI Fairness 360, scikit-learn community
- **Contact:** [email@example.com]

---

## 📝 Changelog

| Version | Date       | Changes                         |
|--------|-----------|----------------------------------|
| 1.0    | 2025-06-30 | Initial professional documentation rewrite |

---

✅ **Professional, explainable, and community-ready!**
